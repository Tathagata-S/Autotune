// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// autotune_lasso_l2
List autotune_lasso_l2(NumericMatrix x, NumericVector y, float alpha, Nullable<double> lambda, double tolerance, double beta_tolerance, short int iter_max, short int beta_iter_max, bool verbose);
RcppExport SEXP _Autotune_autotune_lasso_l2(SEXP xSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP toleranceSEXP, SEXP beta_toleranceSEXP, SEXP iter_maxSEXP, SEXP beta_iter_maxSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< float >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tolerance(beta_toleranceSEXP);
    Rcpp::traits::input_parameter< short int >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< short int >::type beta_iter_max(beta_iter_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(autotune_lasso_l2(x, y, alpha, lambda, tolerance, beta_tolerance, iter_max, beta_iter_max, verbose));
    return rcpp_result_gen;
END_RCPP
}
// autotune_lasso
List autotune_lasso(NumericMatrix x, NumericVector y, float alpha, Nullable<double> lambda, double tolerance, double beta_tolerance, short int iter_max, short int beta_iter_max, bool verbose);
RcppExport SEXP _Autotune_autotune_lasso(SEXP xSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP toleranceSEXP, SEXP beta_toleranceSEXP, SEXP iter_maxSEXP, SEXP beta_iter_maxSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< float >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tolerance(beta_toleranceSEXP);
    Rcpp::traits::input_parameter< short int >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< short int >::type beta_iter_max(beta_iter_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(autotune_lasso(x, y, alpha, lambda, tolerance, beta_tolerance, iter_max, beta_iter_max, verbose));
    return rcpp_result_gen;
END_RCPP
}
// autotune_lasso_active
List autotune_lasso_active(NumericMatrix x, NumericVector y, float alpha, Nullable<double> lambda, double tolerance, double beta_tolerance, short int iter_max, short int beta_iter_max, bool verbose);
RcppExport SEXP _Autotune_autotune_lasso_active(SEXP xSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP toleranceSEXP, SEXP beta_toleranceSEXP, SEXP iter_maxSEXP, SEXP beta_iter_maxSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< float >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tolerance(beta_toleranceSEXP);
    Rcpp::traits::input_parameter< short int >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< short int >::type beta_iter_max(beta_iter_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(autotune_lasso_active(x, y, alpha, lambda, tolerance, beta_tolerance, iter_max, beta_iter_max, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Autotune_autotune_lasso_l2", (DL_FUNC) &_Autotune_autotune_lasso_l2, 9},
    {"_Autotune_autotune_lasso", (DL_FUNC) &_Autotune_autotune_lasso, 9},
    {"_Autotune_autotune_lasso_active", (DL_FUNC) &_Autotune_autotune_lasso_active, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_Autotune(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
